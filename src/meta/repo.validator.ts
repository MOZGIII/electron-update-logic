// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import * as apiTypes from './repo';

export const SCHEMA = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "Metadata": {
            "type": "object",
            "properties": {
                "releases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Release"
                    }
                }
            },
            "required": [
                "releases"
            ],
            "additionalProperties": false
        },
        "Release": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                },
                "feeds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feed"
                    }
                }
            },
            "required": [
                "version",
                "feeds"
            ],
            "additionalProperties": false
        },
        "Feed": {
            "type": "object",
            "properties": {
                "platform": {
                    "$ref": "#/definitions/PlatfomName"
                },
                "arch": {
                    "$ref": "#/definitions/ArchName"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "platform",
                "arch",
                "url"
            ],
            "additionalProperties": false
        },
        "PlatfomName": {
            "anyOf": [
                {
                    "$ref": "#/definitions/global.NodeJS.Platform"
                },
                {
                    "type": "string"
                }
            ]
        },
        "global.NodeJS.Platform": {
            "type": "string",
            "enum": [
                "aix",
                "android",
                "darwin",
                "freebsd",
                "haiku",
                "linux",
                "openbsd",
                "sunos",
                "win32",
                "cygwin",
                "netbsd"
            ]
        },
        "ArchName": {
            "type": "string"
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateMetadata(payload: unknown): apiTypes.Metadata {
  if (!isMetadata(payload)) {
    const error = new Error('invalid payload: Metadata');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isMetadata(payload: unknown): payload is apiTypes.Metadata {
  /** Schema is defined in {@link SCHEMA.definitions.Metadata } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/Metadata" });
  return ajvValidate(payload);
}

export function validateRelease(payload: unknown): apiTypes.Release {
  if (!isRelease(payload)) {
    const error = new Error('invalid payload: Release');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isRelease(payload: unknown): payload is apiTypes.Release {
  /** Schema is defined in {@link SCHEMA.definitions.Release } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/Release" });
  return ajvValidate(payload);
}

export function validateFeed(payload: unknown): apiTypes.Feed {
  if (!isFeed(payload)) {
    const error = new Error('invalid payload: Feed');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isFeed(payload: unknown): payload is apiTypes.Feed {
  /** Schema is defined in {@link SCHEMA.definitions.Feed } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/Feed" });
  return ajvValidate(payload);
}

export function validatePlatfomName(payload: unknown): apiTypes.PlatfomName {
  if (!isPlatfomName(payload)) {
    const error = new Error('invalid payload: PlatfomName');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isPlatfomName(payload: unknown): payload is apiTypes.PlatfomName {
  /** Schema is defined in {@link SCHEMA.definitions.PlatfomName } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/PlatfomName" });
  return ajvValidate(payload);
}

export function validateArchName(payload: unknown): apiTypes.ArchName {
  if (!isArchName(payload)) {
    const error = new Error('invalid payload: ArchName');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function isArchName(payload: unknown): payload is apiTypes.ArchName {
  /** Schema is defined in {@link SCHEMA.definitions.ArchName } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/ArchName" });
  return ajvValidate(payload);
}
